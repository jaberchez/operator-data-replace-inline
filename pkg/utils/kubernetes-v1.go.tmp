package utils

import (
	"context"
	"flag"
	"path/filepath"

	v1 "k8s.io/api/core/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/util/homedir"
)

func getKubernetesSecret(name string, namespace string) (*v1.Secret, error) {
	var secret *v1.Secret

	config, err := getKubernetesConfig()

	if err != nil {
		return secret, err
	}

	// Create the clientset
	clientset, err := kubernetes.NewForConfig(config)

	if err != nil {
		return secret, err
	}

	secret, err := clientset.CoreV1().Secrets.List(context.TODO(), metav1.ListOptions{})

	if err != nil {
		return nil, err
	}

	return secret, nil
}

func getKubernetesConfig() (*rest.Config, error) {
	var config *rest.Config

	// Creates the in-cluster config
	config, err := rest.InClusterConfig()

	if err == nil {
		// No errors (we are inside cluster), return config
		return config, nil
	}

	// Error, try with kubeconfig (outside the cluster)
	var kubeconfig *string

	if home := homedir.HomeDir(); home != "" {
		kubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")
	} else {
		kubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")
	}
	flag.Parse()

	// use the current context in kubeconfig
	config, err = clientcmd.BuildConfigFromFlags("", *kubeconfig)

	if err != nil {
		return config, err
	}

	return config, nil
}
